;$NONSEGMENTED              ; Nur Tiny Model möglich
$MODV2                 ; Code fuer 161/163/164/165/167
$NOLIST
$INCLUDE (REG167.INC)   ; include CPU definition file 
$LIST
;
;	TITLE <Mein Text>
;
;	Prozessor Definitionen
;
;------------------------------------------------------------
; Hier folgen Ihre Konstanten Definitionen
;
Ora     	EQU	0	;Portbit für Ora


Datenspeicher	SECTION Data
;------------------------------------------------------------
; Hier folgen Ihre Speicher Vereinbarungen
;
Mein_Speicher           DB      12      ;Byte Initialisiert
Mein_Speicher1          DW      65      ;Word Initialisiert
Mein_Speicher2          DD      4711
Mein_Text               DB      'ASCII Text'

MyVar32W1				DW		(120000 AND 0xFFFF)	; unteren 16bit
						DW		(120000 SHR 16)		; obere 16bit

MyVar32W2				DW		(75000 AND 0xFFFF)	; unteren 16bit
						DW		(75000 SHR 16)		; obere 16bit

Datenspeicher	ENDS
;
;
Programme	Section Code
ASSUME	DPP3:SYSTEM
ASSUME  DPP0:Datenspeicher
;------------------------------------------------------------
; Hier stehen Ihre Unterprogramme
;
;
;PInit	Initialisiert den Port Px
;=====
;	I: nix
;	O: nix
;	Z: Register, die zerstört werden.
;

Add32 Proc NEAR
	PUSH R0
	PUSH R1	; Inhalt von R1 und R2 auf den Stack kopieren um die Werte zusichern
	
	MOV R2, [R0+]  ;R0 nach R2 kopieren R0 zu R1 inkrementieren
	ADD R2, [R1+]  ;R1 auf R2 addieren R1 zu R2 inkrementieren
	MOV R3, [R0]   ;R0(R1) nach R3 kopieren
	ADDC R3, [R1]  ;R1(R2) mit Carrybit auf R3 addieren

	POP R1	; Orginale vom Stack hohlen
	POP R0

	Ret
Add32	EndP;

Sub32 Proc NEAR
	PUSH R0
	PUSH R1	; Inhalt von R1 und R2 auf den Stack kopieren um die Werte zusichern
	
	MOV R2, [R0+]  ;R0 nach R2 kopieren R0 zu R1 inkrementieren
	SUB R2, [R1+]  ;R1 auf R2 addieren R1 zu R2 inkrementieren
	MOV R3, [R0]   ;R0(R1) nach R3 kopieren
	SUBC R3, [R1]  ;R1(R2) mit Carrybit auf R3 addieren

	POP R1	; Orginale vom Stack hohlen
	POP R0

	Ret
Sub32	EndP;

MyUp1	PROC NEAR

	Ret
MyUp1	EndP;

Addition	PROC NEAR
				MOV R2, [R0]
				ADD R2, [R1]
			ret
Addition EndP;

;------------------------------------------------------------
; Hier startet das Hauptprogramm
;
A_RESET	PROC TASK STARTUP INTNO RESET = 0
	mov	r0,BUSCON0
	and	r0,#0xFF00
	mov	BUSCON0,r0
	mov	dpp0,#PAG Datenspeicher		;Page von Datenspeicher => DPP0
	mov 	KSCCFG,#0x0003;     		;Module Enable
	mov 	R0,KSCCFG			;wieder ruecklesen
	JMP	Main	
A_RESET	EndP

MAIN	Proc
;------------------------------------------------------------
;Hier geht Ihr Hauptprogramm los
;

	MOV R0, #MyVar32W1
	MOV R1, #MyVar32W2
	CALL Add32
	
	MOV R0, #MyVar32W1
	MOV R1, #MyVar32W2
	CALL Sub32

	MOV R0, #MyVar32W2
	MOV R1, #MyVar32W1
	CALL Sub32

	Call	MyUp1	

Forever:


	jmp		Forever
;
;  Notstop
;
StopJetzt:	JMP	StopJetzt

Main		ENDP

Programme	ENDS
;

	END
