A166 MACRO ASSEMBLER  WORK3                                                               05/26/2018 07:52:54 PAGE     1


MACRO ASSEMBLER A166 V5.30
OBJECT MODULE PLACED IN work3.OBJ
ASSEMBLER INVOKED BY: C:\Keil\C166\BIN\A166.EXE work3.a66 MODV2 SEGMENTED MODV2 SET(SMALL) DEBUG NOSYMBOLS EP

LOC      OBJ             LINE     SOURCE

                            1     ;$NONSEGMENTED              ; Nur Tiny Model möglich
                            2     $MODV2                 ; Code fuer 161/163/164/165/167
                          598     $LIST
                          599     ;
                          600     ;       TITLE <Mein Text>
                          601     ;
                          602     ;       Prozessor Definitionen
                          603     ;
                          604     ;------------------------------------------------------------
                          605     ; Hier folgen Ihre Konstanten Definitionen
                          606     ;
 0000                     607     Ora             EQU     0       ;Portbit für Ora
                          608     
                          609     
--------                  610     Datenspeicher   SECTION Data
                          611     ;------------------------------------------------------------
                          612     ; Hier folgen Ihre Speicher Vereinbarungen
                          613     ;
00000000 0C               614     Mein_Speicher           DB      12      ;Byte Initialisiert
00000002 4100             615     Mein_Speicher1          DW      65      ;Word Initialisiert
00000004 67120000         616     Mein_Speicher2          DD      4711
00000008 41534349         617     Mein_Text               DB      'ASCII Text'
0000000C 49205465                 
00000010 7874             617     
                          618     
00000012 C0D4             619     MyVar32W1                               DW              (120000 AND 0xFFFF)     ; unte
                                  ren 16bit
00000014 0100             620                                                     DW              (120000 SHR 16)       
                                    ; obere 16bit
                          621     
00000016 F824             622     MyVar32W2                               DW              (75000 AND 0xFFFF)      ; unte
                                  ren 16bit
00000018 0100             623                                                     DW              (75000 SHR 16)        
                                    ; obere 16bit
                          624     
--------                  625     Datenspeicher   ENDS
                          626     ;
                          627     ;
--------                  628     Programme       Section Code
                          629     ASSUME  DPP3:SYSTEM
                          630     ASSUME  DPP0:Datenspeicher
                          631     ;------------------------------------------------------------
                          632     ; Hier stehen Ihre Unterprogramme
                          633     ;
                          634     ;
                          635     ;PInit  Initialisiert den Port Px
                          636     ;=====
                          637     ;       I: nix
                          638     ;       O: nix
                          639     ;       Z: Register, die zerstört werden.
                          640     ;
                          641     
                          642     Add32 Proc NEAR
00000000 ECF0             643             PUSH R0
00000002 ECF1             644             PUSH R1 ; Inhalt von R1 und R2 auf den Stack kopieren um die Werte zusichern
                          645             
00000004 9820             646             MOV R2, [R0+]  ;R0 nach R2 kopieren R0 zu R1 inkrementieren
00000006 082D             647             ADD R2, [R1+]  ;R1 auf R2 addieren R1 zu R2 inkrementieren
A166 MACRO ASSEMBLER  WORK3                                                               05/26/2018 07:52:54 PAGE     2

00000008 A830             648             MOV R3, [R0]   ;R0(R1) nach R3 kopieren
0000000A 1839             649             ADDC R3, [R1]  ;R1(R2) mit Carrybit auf R3 addieren
                          650     
0000000C FCF1             651             POP R1  ; Orginale vom Stack hohlen
0000000E FCF0             652             POP R0
                          653     
00000010 CB00             654             Ret
                          655     Add32   EndP;
                          656     
                          657     Sub32 Proc NEAR
00000012 ECF0             658             PUSH R0
00000014 ECF1             659             PUSH R1 ; Inhalt von R1 und R2 auf den Stack kopieren um die Werte zusichern
                          660             
00000016 9820             661             MOV R2, [R0+]  ;R0 nach R2 kopieren R0 zu R1 inkrementieren
00000018 282D             662             SUB R2, [R1+]  ;R1 auf R2 addieren R1 zu R2 inkrementieren
0000001A A830             663             MOV R3, [R0]   ;R0(R1) nach R3 kopieren
0000001C 3839             664             SUBC R3, [R1]  ;R1(R2) mit Carrybit auf R3 addieren
                          665     
0000001E FCF1             666             POP R1  ; Orginale vom Stack hohlen
00000020 FCF0             667             POP R0
                          668     
00000022 CB00             669             Ret
                          670     Sub32   EndP;
                          671     
                          672     MyUp1   PROC NEAR
                          673     
00000024 CB00             674             Ret
                          675     MyUp1   EndP;
                          676     
                          677     Addition        PROC NEAR
00000026 A820             678                                     MOV R2, [R0]
00000028 0829             679                                     ADD R2, [R1]
0000002A CB00             680                             ret
                          681     Addition EndP;
                          682     
                          683     ;------------------------------------------------------------
                          684     ; Hier startet das Hauptprogramm
                          685     ;
                          686     A_RESET PROC TASK STARTUP INTNO RESET = 0
0000002C F2F00CFF         687             mov     r0,BUSCON0
00000030 66F000FF         688             and     r0,#0xFF00
00000034 F6F00CFF         689             mov     BUSCON0,r0
00000038 E600???? R       690             mov     dpp0,#PAG Datenspeicher         ;Page von Datenspeicher => DPP0
0000003C E60E0300         691             mov     KSCCFG,#0x0003;                 ;Module Enable
00000040 F2F01CFE         692             mov     R0,KSCCFG                       ;wieder ruecklesen
00000044 0D00             693             JMP     Main    
                          694     A_RESET EndP
                          695     
                          696     MAIN    Proc
                          697     ;------------------------------------------------------------
                          698     ;Hier geht Ihr Hauptprogramm los
                          699     ;
                          700     
00000046 E6F0???? R       701             MOV R0, #MyVar32W1
0000004A E6F1???? R       702             MOV R1, #MyVar32W2
0000004E BBD8             703             CALL Add32
                          704             
00000050 E6F0???? R       705             MOV R0, #MyVar32W1
00000054 E6F1???? R       706             MOV R1, #MyVar32W2
00000058 BBDC             707             CALL Sub32
                          708     
0000005A E6F0???? R       709             MOV R0, #MyVar32W2
0000005E E6F1???? R       710             MOV R1, #MyVar32W1
00000062 BBD7             711             CALL Sub32
                          712     
00000064 BBDF             713             Call    MyUp1   
A166 MACRO ASSEMBLER  WORK3                                                               05/26/2018 07:52:54 PAGE     3

                          714     
                          715     Forever:
                          716     
                          717     
00000066 0DFF             718             jmp             Forever
                          719     ;
                          720     ;  Notstop
                          721     ;
00000068 0DFF             722     StopJetzt:      JMP     StopJetzt
                          723     
                          724     Main            ENDP
                          725     
--------                  726     Programme       ENDS
                          727     ;
                          728     
                          729             END



ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
